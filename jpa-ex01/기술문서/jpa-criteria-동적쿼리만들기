JPA (Java Persistence API) Criteria는 JPA 2.0에서 도입된 타입 세이프한 동적 쿼리를 생성하기 위한 API입니다.
SQL과 유사한 쿼리를 Java 코드로 작성할 수 있으며, 쿼리를 컴파일 타임에 체크할 수 있어 더 안전한 코드를 작성할 수 있습니다.
이는 JPQL (Java Persistence Query Language)의 문자열 기반 쿼리 작성 방식을 보완하기 위한 것입니다.

JPA Criteria API의 주요 구성 요소
    CriteriaBuilder: 쿼리를 생성하기 위한 팩토리 클래스입니다. EntityManager를 통해 얻을 수 있습니다.
    CriteriaQuery: 쿼리의 루트 객체를 정의하고, 결과 타입을 설정합니다.
    Root: 쿼리의 시작점을 나타내며, 엔티티를 지정합니다.
    Predicate: 쿼리의 조건을 정의합니다. 조건은 CriteriaBuilder를 사용하여 생성합니다.
간단한 예제
    다음은 User 엔티티에 대한 간단한 JPA Criteria 쿼리 예제입니다.

```User 엔티티```
import javax.persistence.Entity;
import javax.persistence.Id;

@Entity
public class User {
    @Id
    private Long id;
    private String username;
    private String email;

    // getters and setters
}

```UserRepository```
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;
import java.util.List;

public class UserRepository {

    @PersistenceContext
    private EntityManager entityManager;

    public List<User> findUsersByUsername(String username) {
        // CriteriaBuilder 인스턴스를 얻습니다.
        CriteriaBuilder cb = entityManager.getCriteriaBuilder();

        // CriteriaQuery 객체를 생성하고 반환 타입을 지정합니다.
        CriteriaQuery<User> query = cb.createQuery(User.class);

        // 쿼리의 루트 객체를 정의합니다.
        Root<User> user = query.from(User.class);

        // 조건을 정의합니다.
        Predicate usernamePredicate = cb.equal(user.get("username"), username);

        // 쿼리 조건을 설정합니다.
        query.where(usernamePredicate);

        // 쿼리를 실행하고 결과를 반환합니다.
        return entityManager.createQuery(query).getResultList();
    }
}

주요 장점
    타입 세이프티: 쿼리가 컴파일 타임에 체크되므로 런타임 오류를 줄일 수 있습니다.
    동적 쿼리 생성: 조건에 따라 동적으로 쿼리를 구성할 수 있습니다.
    유지 보수성: 쿼리를 문자열로 작성하는 대신 코드로 작성하므로 가독성과 유지보수성이 향상됩니다.
단점
    복잡성: 단순한 쿼리의 경우에도 코드가 복잡해질 수 있습니다.
    가독성: JPQL이나 SQL에 익숙한 개발자에게는 코드의 가독성이 떨어질 수 있습니다.
    JPA Criteria API는 복잡한 동적 쿼리를 생성하는 데 유용하지만,
    단순한 쿼리의 경우에는 오히려 코드가 복잡해질 수 있으므로 상황에 따라 적절하게 선택하여 사용하는 것이 좋습니다.